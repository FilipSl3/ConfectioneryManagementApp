// <auto-generated />
using System;
using ConfectioneryManagementApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConfectioneryManagementApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250529185447_AddOrderManyToMany")]
    partial class AddOrderManyToMany
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CakeEntityOrderEntity", b =>
                {
                    b.Property<int>("OrderEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderedCakesId")
                        .HasColumnType("integer");

                    b.HasKey("OrderEntityId", "OrderedCakesId");

                    b.HasIndex("OrderedCakesId");

                    b.ToTable("OrderCakes", (string)null);
                });

            modelBuilder.Entity("ConfectioneryManagementApp.Models.Entities.CakeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Flavor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cakes");
                });

            modelBuilder.Entity("ConfectioneryManagementApp.Models.Entities.CakeIngredientEntity", b =>
                {
                    b.Property<int>("CakeId")
                        .HasColumnType("integer");

                    b.Property<int>("IngredientId")
                        .HasColumnType("integer");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.HasKey("CakeId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("CakeIngredientEntity");
                });

            modelBuilder.Entity("ConfectioneryManagementApp.Models.Entities.IngredientEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("ConfectioneryManagementApp.Models.Entities.OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DecorationDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ConfectioneryManagementApp.Models.Entities.PastryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Pastries");
                });

            modelBuilder.Entity("ConfectioneryManagementApp.Models.Entities.PastryIngredientEntity", b =>
                {
                    b.Property<int>("PastryId")
                        .HasColumnType("integer");

                    b.Property<int>("IngredientId")
                        .HasColumnType("integer");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.HasKey("PastryId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("PastryIngredientEntity");
                });

            modelBuilder.Entity("OrderEntityPastryEntity", b =>
                {
                    b.Property<int>("CakesId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderEntityId")
                        .HasColumnType("integer");

                    b.HasKey("CakesId", "OrderEntityId");

                    b.HasIndex("OrderEntityId");

                    b.ToTable("OrderPastries", (string)null);
                });

            modelBuilder.Entity("CakeEntityOrderEntity", b =>
                {
                    b.HasOne("ConfectioneryManagementApp.Models.Entities.OrderEntity", null)
                        .WithMany()
                        .HasForeignKey("OrderEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfectioneryManagementApp.Models.Entities.CakeEntity", null)
                        .WithMany()
                        .HasForeignKey("OrderedCakesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConfectioneryManagementApp.Models.Entities.CakeIngredientEntity", b =>
                {
                    b.HasOne("ConfectioneryManagementApp.Models.Entities.CakeEntity", "Cake")
                        .WithMany("CakeIngredients")
                        .HasForeignKey("CakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfectioneryManagementApp.Models.Entities.IngredientEntity", "Ingredient")
                        .WithMany("CakeIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cake");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("ConfectioneryManagementApp.Models.Entities.PastryIngredientEntity", b =>
                {
                    b.HasOne("ConfectioneryManagementApp.Models.Entities.IngredientEntity", "Ingredient")
                        .WithMany("PastryIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfectioneryManagementApp.Models.Entities.PastryEntity", "Pastry")
                        .WithMany("PastryIngredients")
                        .HasForeignKey("PastryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Pastry");
                });

            modelBuilder.Entity("OrderEntityPastryEntity", b =>
                {
                    b.HasOne("ConfectioneryManagementApp.Models.Entities.PastryEntity", null)
                        .WithMany()
                        .HasForeignKey("CakesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfectioneryManagementApp.Models.Entities.OrderEntity", null)
                        .WithMany()
                        .HasForeignKey("OrderEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConfectioneryManagementApp.Models.Entities.CakeEntity", b =>
                {
                    b.Navigation("CakeIngredients");
                });

            modelBuilder.Entity("ConfectioneryManagementApp.Models.Entities.IngredientEntity", b =>
                {
                    b.Navigation("CakeIngredients");

                    b.Navigation("PastryIngredients");
                });

            modelBuilder.Entity("ConfectioneryManagementApp.Models.Entities.PastryEntity", b =>
                {
                    b.Navigation("PastryIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
